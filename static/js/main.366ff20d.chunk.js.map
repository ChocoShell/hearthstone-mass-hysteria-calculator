{"version":3,"sources":["MinionCountForm.js","Minion.js","MinionEntryForm.js","Results.js","massHysteria.js","App.js","serviceWorker.js","index.js"],"names":["React","Component","Minion","handleChange","event","field","preventDefault","_this","props","_this2","this","react_default","a","createElement","className","htmlFor","name","concat","onChange","e","value","attack","type","id","placeholder","health","MinionEntryForm","state","Friendly1","position","Friendly2","Friendly3","Friendly4","Friendly5","Friendly6","Friendly7","Enemy1","Enemy2","Enemy3","Enemy4","Enemy5","Enemy6","Enemy7","handleSubmit","parseInt","target","isNaN","setState","Object","defineProperty","objectSpread","onSubmit","Array","from","friendlyMinions","keys","map","i","src_Minion_0","key","enemyMinions","Results","_this$props$stats","stats","healthBefore","healthAfter","survival","isEnemy","clearChance","remainingDamage","scope","minions","m","index","toFixed","mysample","x","length","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","shuffle","range","n","matrix","arr","ncol","byrow","result","row","j","push","massHysteria","boardStats","order","_loop","attacker","attackee","filter","v","p","testMassHysteria","trials","statsMat","fill","simStats","fillVal","dim1","dim2","dim3","arr3D","cleared","trial","trialResult","healthSum","reduce","curr","next","App","allyCount","enemyCount","boardMinions","results","handleCountSubmit","allies","enemies","trialCount","handleEntrySubmit","minion","console","log","_arr","values","_i","stat","finalResult","handleTrialChange","class","src_MinionEntryForm_0","src_Results","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.366ff20d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass MinionCountForm extends React.Component {\r\n  state = {\r\n    allyCount: '',\r\n    enemyCount: ''\r\n  }\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.handleSubmit(this.state.allyCount, this.state.enemyCount);\r\n  }\r\n\r\n  handleAllyChange = event => {\r\n    event.preventDefault();\r\n    let value = event.target.value;\r\n    this.setState({allyCount: value});\r\n  }\r\n\r\n  handleEnemyChange = event => {\r\n    event.preventDefault();\r\n    const value = event.target.value;\r\n    this.setState({enemyCount: value});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <div className=\"form-group d-flex flex-column\">\r\n          <label htmlFor=\"ally\">Ally Minions on Board:</label>\r\n          <input\r\n            onChange={this.handleAllyChange}\r\n            type=\"text\"\r\n            className=\"form-control mb-2\"\r\n            id=\"ally\"\r\n            placeholder=\"Ranges from 0 to 7\"\r\n          />\r\n          <label htmlFor=\"enemy\">Enemy Minions on Board:</label>\r\n          <input\r\n            onChange={this.handleEnemyChange}\r\n            type=\"text\"\r\n            className=\"form-control mb-2\"\r\n            id=\"enemy\"\r\n            placeholder=\"Ranges from 0 to 7\"\r\n          />\r\n          <label htmlFor=\"enemy\">Trials to Run:</label>\r\n          <input\r\n            onChange={this.props.handleTrialChange}\r\n            type=\"text\"\r\n            className=\"form-control mb-2\"\r\n            id=\"enemy\"\r\n            placeholder=\"Max 1,000,000\"\r\n            value={this.props.trials}\r\n          />\r\n          <small id=\"trialsHelpInline\" className=\"text-muted\">\r\n            Ranges from 1 to 1,000,000\r\n          </small>\r\n        </div>\r\n        <div className=\"form-inline\">\r\n          <button onClick={this.handleSubmit} className=\"btn btn-secondary\">Submit</button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MinionCountForm;\r\n","import React from 'react';\r\nimport './Minion.css';\r\n\r\nclass Minion extends React.Component {\r\n  handleChange = (event, field) => {\r\n    event.preventDefault();\r\n    this.props.handleChange(event, field);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"Minion\">{this.props.name}:</label>\r\n        <div className=\"form-inline\">\r\n          <label htmlFor={`${this.props.name}_attack`} className=\"col-sm-4 col-form-label\">Attack:</label>\r\n          <input\r\n            onChange={e => this.handleChange(e, \"attack\")}\r\n            value={this.props.attack}\r\n            name={this.props.name}\r\n            type=\"text\"\r\n            className=\"form-control col-sm-6\"\r\n            id={`${this.props.name}_attack`}\r\n            placeholder=\"\"\r\n          />\r\n        </div>\r\n        <div className=\"form-inline\">\r\n          <label htmlFor={`${this.props.name}_health`} className=\"col-sm-4 col-form-label\">Health:</label>\r\n          <input\r\n            onChange={e => this.handleChange(e, \"health\")}\r\n            value={this.props.health}\r\n            name={this.props.name}\r\n            type=\"text\"\r\n            className=\"form-control col-sm-6\"\r\n            id={`${this.props.name}_health`}\r\n            placeholder=\"\"\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Minion;\r\n","import React from 'react';\r\nimport Minion from './Minion';\r\nimport './MinionEntryForm.css';\r\n\r\nclass MinionEntryForm extends React.Component {\r\n  state = {\r\n    Friendly1: {\r\n      attack: 0,\r\n      health: 0,\r\n      position: 0\r\n    },\r\n    Friendly2: {\r\n      attack: 0,\r\n      health: 0,\r\n      position: 0\r\n    },\r\n    Friendly3: {\r\n      attack: 0,\r\n      health: 0,\r\n      position: 0\r\n    },\r\n    Friendly4: {\r\n      attack: 0,\r\n      health: 0,\r\n      position: 0\r\n    },\r\n    Friendly5: {\r\n      attack: 0,\r\n      health: 0,\r\n      position: 0\r\n    },\r\n    Friendly6: {\r\n      attack: 0,\r\n      health: 0,\r\n      position: 0\r\n    },\r\n    Friendly7: {\r\n      attack: 0,\r\n      health: 0,\r\n      position: 0\r\n    },\r\n    Enemy1: {\r\n      attack: 0,\r\n      health: 0,\r\n      position: 1\r\n    },\r\n    Enemy2: {\r\n      attack: 0,\r\n      health: 0,\r\n      position: 1\r\n    },\r\n    Enemy3: {\r\n      attack: 0,\r\n      health: 0,\r\n      position: 1\r\n    },\r\n    Enemy4: {\r\n      attack: 0,\r\n      health: 0,\r\n      position: 1\r\n    },\r\n    Enemy5: {\r\n      attack: 0,\r\n      health: 0,\r\n      position: 1\r\n    },\r\n    Enemy6: {\r\n      attack: 0,\r\n      health: 0,\r\n      position: 1\r\n    },\r\n    Enemy7: {\r\n      attack: 0,\r\n      health: 0,\r\n      position: 1\r\n    },\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    this.props.handleSubmit(this.state)\r\n  }\r\n\r\n  handleChange = (event, field, id) => {\r\n    event.preventDefault();\r\n    let value = parseInt(event.target.value);\r\n    if (isNaN(value)) {\r\n      value = 0;\r\n    }\r\n    this.setState({[id]: {\r\n      ...this.state[id],\r\n      [field]: value\r\n    }})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <div>\r\n          <div className=\"d-inline-flex\">\r\n            { \r\n              (Array.from(Array(this.props.friendlyMinions).keys())).map( i => {\r\n                return (\r\n                  <Minion\r\n                    name={`Friendly ${i+1}`}\r\n                    key={`Friendly${i+1}`}\r\n                    attack={this.state[`Friendly${i+1}`][0]}\r\n                    health={this.state[`Friendly${i+1}`][1]}\r\n                    handleChange={(e, field) => this.handleChange(e, field, `Friendly${i+1}`)}\r\n                  />\r\n                )\r\n              })\r\n            }\r\n          </div>\r\n          <div className=\"d-inline-flex\">\r\n            { \r\n              (Array.from(Array(this.props.enemyMinions).keys())).map( i => {\r\n                return (\r\n                  <Minion\r\n                    name={`Enemy ${i+1}`}\r\n                    key={`Enemy${i+1}`}\r\n                    attack={this.state[`Enemy${i+1}`][0]}\r\n                    health={this.state[`Enemy${i+1}`][1]}\r\n                    handleChange={(e, field) => this.handleChange(e, field, `Enemy${i+1}`)}\r\n                  />\r\n                )\r\n              })\r\n            }\r\n          </div>\r\n        </div>\r\n        { !!(this.props.enemyMinions + this.props.friendlyMinions) &&\r\n          <button className=\"btn btn-primary\" type=\"submit\">Calculate</button>\r\n        }\r\n\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MinionEntryForm;\r\n","import React from 'react';\r\n\r\nclass Results extends React.Component {\r\n\r\n  render() {\r\n    const {attack, healthBefore, healthAfter, survival, isEnemy, clearChance, remainingDamage} = this.props.stats;\r\n    return (\r\n      <div>\r\n        <table className=\"table\">\r\n          <thead className=\"thead-dark\">\r\n            <tr>\r\n              <th scope=\"col\">Minion</th>\r\n              <th scope=\"col\">Attack</th>\r\n              <th scope=\"col\">Health Before</th>\r\n              <th scope=\"col\">Avg. Health After</th>\r\n              <th scope=\"col\">Surival Chance</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {\r\n              this.props.minions.map((m, index) => {\r\n                return (\r\n                  <tr className={isEnemy[index] ? \"table-danger\" : \"table-success\"}>\r\n                    <td>{m}</td>\r\n                    <td>{attack[index]}</td>\r\n                    <td>{healthBefore[index]}</td>\r\n                    <td>{healthAfter[index].toFixed(2)}</td>\r\n                    <td>{`${(100*survival[index]).toFixed(2)}%`}</td>\r\n                  </tr>\r\n                );\r\n              })\r\n            }\r\n          </tbody>\r\n        </table>\r\n        <h5>\r\n          {`Chance to Clear Enemy's Board: ${(100*clearChance).toFixed(2)}%`}\r\n        </h5>\r\n        <h5>\r\n          {`Expected Remaining Enemy Damage: ${remainingDamage.toFixed(2)}`}\r\n        </h5>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Results;\r\n","const shuffle = array => {\r\n  let currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (0 !== currentIndex) {\r\n\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex -= 1;\r\n\r\n    // And swap it with the current element.\r\n    temporaryValue = array[currentIndex];\r\n    array[currentIndex] = array[randomIndex];\r\n    array[randomIndex] = temporaryValue;\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\n// a remake of the sample function that prevents sample(x)=sample(1:x) when length(x)=1\r\nconst mysample = (x) => {\r\n    if (x.length > 1) {\r\n      return shuffle(x);\r\n    } else {\r\n      return x\r\n    }\r\n}\r\n\r\n// Create list from 0 to n-1\r\nconst range = n => {\r\n  return Array.from(Array(n).keys());\r\n}\r\n\r\n// Create a 2D array\r\nconst matrix = (arr, ncol, byrow) => {\r\n  const result = [];\r\n  for (let i=0; i < arr.length/ncol; i++) {\r\n    const row = [];\r\n    for (let j=0; j < ncol; j++) {\r\n      if (byrow) {\r\n        row.push(arr[i*ncol+j])\r\n      } else {\r\n        row.push(arr[i+ncol*j])\r\n      }\r\n    }\r\n    result.push(row);\r\n  }\r\n  return result;\r\n}\r\n\r\n// Create a filled 3D array\r\nconst arr3D = (fillVal, dim1, dim2, dim3) => {\r\n  let result = [];\r\n  for (let i=0; i < dim1; i++) {\r\n    const row = [];\r\n    for (let j=0; j < dim2; j++) {\r\n      row.push(new Array(dim3).fill(fillVal))\r\n    }\r\n    result.push(row);\r\n  }\r\n  return result;\r\n}\r\n\r\n// Mass hysteria simulation function:\r\n// Input: vector of initial stats of minions and which side of the board they are on: \r\n// 0 = your side, 1 = opponent's side\r\n// i.e. (attack1, health1, side1, attack2, health2, side 2,...)\r\n// Output: matrix of stats of minions after mass hysteria has been cast\r\nconst massHysteria = boardStats => {\r\n  const n = boardStats.length/3;\r\n  let stats = matrix(boardStats, 3, true);\r\n  const order = mysample(range(n));\r\n  // for each minion\r\n  for (let i = 0; i < n; i++) {\r\n    // Choose attacker\r\n    const attacker = order[i];\r\n    // Check if attacker is alive    \r\n    if (stats[attacker][1] > 0) {\r\n      // Create a list of possible attackees\r\n      // They can't be the attacker\r\n      let attackee = mysample(range(n).filter(v => v !== attacker));\r\n      // They must be alive\r\n      attackee = attackee.filter(p => {\r\n        return stats[p][1] > 0\r\n      });\r\n      if (attackee.length > 0) {\r\n        // choose one\r\n        attackee = attackee[0];\r\n        // and then attack it\r\n        stats[attacker][1] = stats[attacker][1] - stats[attackee][0];\r\n        stats[attackee][1] = stats[attackee][1] - stats[attacker][0];\r\n      }\r\n    }\r\n  }\r\n  return stats;\r\n}\r\n\r\n// Multiple trials of mass hysteria\r\n// Input: minions' initial stats & posistion and number of trials\r\n// Output: mean stats left on board and proportion of trials in which every \r\n// minion dies (a full board clear)\r\nconst testMassHysteria = (stats, trials) => {\r\n  const n = stats.length/3;\r\n  if (n % 1 !== 0){\r\n    return \"Invalid Minion Stats.\";\r\n  } else {\r\n    const statsMat = matrix(stats, 3, true);\r\n    // Values for Chart at end\r\n    const attack = [];\r\n    const healthBefore = [];\r\n    const isEnemy = [];\r\n    for (let i = 0; i < statsMat.length; i++) {\r\n      attack.push(statsMat[i][0]);\r\n      healthBefore.push(statsMat[i][1]);\r\n      isEnemy.push(statsMat[i][2]);\r\n    }\r\n  \r\n    const survival = new Array(n).fill(0);\r\n    // Create 3D array to house the trials\r\n    let simStats = arr3D(0, n, 3, trials);\r\n    let cleared = new Array(trials).fill(1);\r\n    // for each trial\r\n    for (let trial =0; trial < trials; trial++) {\r\n      // do the trial and put it in the array\r\n      for (let i = 0; i < simStats.length; i++) {\r\n        simStats[i][2][trial] = statsMat[i][2];\r\n      }\r\n      const trialResult = massHysteria(stats);\r\n      for (let i = 0; i < simStats.length; i++) {\r\n        for (let j = 0; j < simStats[0].length; j++) {\r\n          simStats[i][j][trial] = trialResult[i][j];\r\n        }\r\n      }\r\n\r\n      // Get each minion's chance of survival and the chance of clearing the enemy's board\r\n      for (let i = 0; i < simStats.length; i++) {\r\n        survival[i] = survival[i] + (simStats[i][1][trial] > 0 ? 1/trials : 0);\r\n        // see whether or not the trial resulted in a full clear of enemy board\r\n        if (simStats[i][1][trial] * simStats[i][2][trial] > 0.05) {\r\n          cleared[trial] = 0;\r\n        }\r\n      } \r\n    }\r\n    const healthAfter = [];\r\n    // const chanceOfSurvival = [];\r\n    for (let i = 0; i < simStats.length; i++) {\r\n      let healthSum = 0;\r\n      for (let j = 0; j < trials; j++) {\r\n        healthSum += simStats[i][1][j];\r\n      }\r\n      healthAfter.push(healthSum/trials);\r\n    }\r\n    const clearChance = cleared.reduce((curr, next) => curr+next)/cleared.length;\r\n\r\n    let remainingDamage = 0;\r\n    for (let i = 0; i < attack.length; i++) {\r\n      remainingDamage += attack[i]*survival[i]*isEnemy[i];  \r\n    }\r\n\r\n    // Printing it out and formatting numbers.\r\n    // Remove the formatting if you want to do calculations on these\r\n    // console.log(\"attack: \", attack);\r\n    // console.log(\"healthBefore: \", healthBefore);\r\n    // console.log(\"healthAfter: \", healthAfter.map(x => Number(x.toFixed(2))));\r\n    // console.log(\"survival: \", survival.map(x => Number(x.toFixed(2))));\r\n    // console.log(\"isEnemy: \", isEnemy);\r\n    // console.log(\"clearChance: \", 100*clearChance.toFixed(4));\r\n    // console.log(\"remainingDamage: \", remainingDamage.toFixed(2));\r\n    return {\r\n      attack,\r\n      healthBefore,\r\n      healthAfter,\r\n      survival,\r\n      isEnemy,\r\n      clearChance,\r\n      remainingDamage\r\n    }\r\n  }\r\n}\r\n\r\nexport default testMassHysteria;\r\n","import React from 'react';\nimport MinionCountForm from './MinionCountForm';\nimport MinionEntryForm from './MinionEntryForm';\nimport Results from './Results';\nimport massHysteria from \"./massHysteria\";\n\n\nclass App extends React.Component {\n  state = {\n    allyCount: 7 ,\n    enemyCount: 7,\n    boardMinions: [],\n    results: {\n      attack: [],\n      healthBefore: [],\n      healthAfter: [],\n      survival: 0,\n      isEnemy: 0,\n      clearChance: 0,\n      remainingDamage: 0\n    },\n    trials: 100000\n  }\n\n  handleCountSubmit = (allies, enemies) => {\n    let allyCount = parseInt(allies, 10);\n    let enemyCount = parseInt(enemies, 10);\n    let trials = this.state.trials;\n    let trialCount = trials;\n    if (trials > 1000000) {\n      trialCount = 1000000;\n    } else if (trials < 0) {\n      trialCount = 1;\n    }\n    if (isNaN(allyCount)) {\n      allyCount = 0;\n    } else if (allyCount > 7) {\n      allyCount = 7;\n    } else if (allyCount < 0) {\n      allyCount = 0;\n    }\n    if (isNaN(enemyCount)) {\n      enemyCount = 0;\n    } else if (enemyCount > 7) {\n      enemyCount = 7;\n    } else if (enemyCount < 0) {\n      enemyCount = 0;\n    }\n    this.setState({\n      allyCount,\n      enemyCount,\n      trials: trialCount\n    });\n  }\n\n  handleEntrySubmit = (minions) => {\n    const result = [];\n    const boardMinions = [];\n    for (let key in minions) {\n      const minion = minions[key];\n      console.log(minion);\n      if (minion.health > 0) {\n        for (let stat of Object.values(minion)) {\n          result.push(stat);\n        }\n        boardMinions.push(key);\n      }\n    }\n    const finalResult = massHysteria(result, this.state.trials);\n    console.log(finalResult);\n    this.setState({results: finalResult, boardMinions})\n  }\n\n  handleTrialChange = event => {\n    event.preventDefault();\n    let value = parseInt(event.target.value);\n    if (!isNaN(value)) {\n      this.setState({trials: value});\n    }\n  }\n\n  render() {\n        // <div className=\"\">\n        //   <MinionCountForm\n        //     handleSubmit={this.handleCountSubmit}\n        //     trials={this.state.trials}\n        //     handleTrialChange={this.handleTrialChange}\n        //   />\n        // </div>\n    return (\n      <div className=\"d-flex flex-column\">\n        <h3>Hearthstone Mass Hysteria Simulator</h3>\n        <div class=\"w-100\"><hr/></div>\n        <h4>Minion Stats</h4>\n        <MinionEntryForm\n          friendlyMinions={this.state.allyCount}\n          enemyMinions={this.state.enemyCount}\n          handleSubmit={this.handleEntrySubmit}\n        />\n        {\n          this.state.boardMinions.length > 0 &&\n          (\n            <div>\n              <h4>Results</h4>\n              <Results\n                stats={this.state.results}\n                trials={this.state.trials}\n                minions={this.state.boardMinions}\n              />\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["MinionCountForm.js","Minion.js","MinionEntryForm.js","Results.js","massHysteria.js","App.js","serviceWorker.js","index.js"],"names":["MinionCountForm","state","friendlyCount","enemyCount","handleSubmit","e","preventDefault","_this","props","handleFriendlyChange","event","value","target","setState","handleEnemyChange","react_default","a","createElement","onSubmit","this","className","htmlFor","onChange","type","id","placeholder","handleTrialChange","trials","React","Component","Minion","handleChange","field","_this2","name","concat","attack","health","MinionEntryForm","Friendly1","position","Friendly2","Friendly3","Friendly4","Friendly5","Friendly6","Friendly7","Enemy1","Enemy2","Enemy3","Enemy4","Enemy5","Enemy6","Enemy7","parseInt","isNaN","Object","defineProperty","objectSpread","Array","from","friendlyMinions","keys","map","i","src_Minion","key","enemyMinions","Results","_this$props$stats","stats","healthBefore","healthAfter","survival","clearChance","remainingDamage","scope","minions","m","index","toFixed","mysample","x","length","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","shuffle","range","n","matrix","arr","ncol","byrow","result","row","j","push","massHysteria","boardStats","order","_loop","attacker","attackee","filter","v","p","testMassHysteria","statsMat","isEnemy","fill","simStats","fillVal","dim1","dim2","dim3","arr3D","cleared","trial","trialResult","healthSum","reduce","curr","next","App","allyCount","boardMinions","results","handleCountSubmit","allies","enemies","trialCount","handleEntrySubmit","minion","console","log","_arr","values","_i","stat","finalResult","src_MinionCountForm","src_MinionEntryForm_0","src_Results","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a78042dd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass MinionCountForm extends React.Component {\r\n  state = {\r\n    friendlyCount: '',\r\n    enemyCount: ''\r\n  }\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.handleSubmit(this.state.friendlyCount, this.state.enemyCount);\r\n  }\r\n\r\n  handleFriendlyChange = event => {\r\n    event.preventDefault();\r\n    let value = event.target.value;\r\n    this.setState({friendlyCount: value});\r\n  }\r\n\r\n  handleEnemyChange = event => {\r\n    event.preventDefault();\r\n    const value = event.target.value;\r\n    this.setState({enemyCount: value});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <div className=\"form-group col-sm-4\">\r\n          <div className=\"form-group row\">\r\n            <label htmlFor=\"friendly\" className=\"col-sm-4 col-form-label\"># of Friendly Minions:</label>\r\n            <input\r\n              onChange={this.handleFriendlyChange}\r\n              type=\"text\"\r\n              className=\"form-control col-sm-4\"\r\n              id=\"friendly\"\r\n              placeholder=\"Max 7\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group row\">\r\n            <label htmlFor=\"enemy\" className=\"col-sm-4 col-form-label\"># of Enemy Minions:</label>\r\n            <input\r\n              onChange={this.handleEnemyChange}\r\n              type=\"text\"\r\n              className=\"form-control col-sm-4\"\r\n              id=\"enemy\"\r\n              placeholder=\"Max 7\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group row\">\r\n            <label htmlFor=\"enemy\" className=\"col-sm-4 col-form-label\"># of Trials:</label>\r\n            <input\r\n              onChange={this.props.handleTrialChange}\r\n              type=\"text\"\r\n              className=\"form-control col-sm-4\"\r\n              id=\"enemy\"\r\n              placeholder=\"Max 1,000,000\"\r\n              value={this.props.trials}\r\n            />\r\n          </div>\r\n        </div>\r\n        <input type=\"submit\" value=\"Submit\" />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MinionCountForm;\r\n","import React from 'react';\r\n\r\n\r\nclass Minion extends React.Component {\r\n  handleChange = (event, field) => {\r\n    event.preventDefault();\r\n    this.props.handleChange(event, field);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"form-group formy\">\r\n        <label htmlFor=\"InputTicker\">{this.props.name}:</label>\r\n        <div className=\"form-group row\">\r\n          <label htmlFor={`${this.props.name}_attack`} className=\"col-sm-4 col-form-label\">Attack:</label>\r\n          <input\r\n            onChange={e => this.handleChange(e, \"attack\")}\r\n            value={this.props.attack}\r\n            name={this.props.name}\r\n            type=\"text\"\r\n            className=\"form-control col-sm-4\"\r\n            id={`${this.props.name}_attack`}\r\n            placeholder=\"\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group row\">\r\n          <label htmlFor={`${this.props.name}_health`} className=\"col-sm-4 col-form-label\">Health:</label>\r\n          <input\r\n            onChange={e => this.handleChange(e, \"health\")}\r\n            value={this.props.health}\r\n            name={this.props.name}\r\n            type=\"text\"\r\n            className=\"form-control col-sm-4\"\r\n            id={`${this.props.name}_health`}\r\n            placeholder=\"\"\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Minion;\r\n","import React from 'react';\r\nimport Minion from './Minion';\r\nimport './MinionEntryForm.css';\r\n\r\nclass MinionEntryForm extends React.Component {\r\n  state = {\r\n    Friendly1: {\r\n      attack: 0,\r\n      health: 0,\r\n      position: 0\r\n    },\r\n    Friendly2: {\r\n      attack: 0,\r\n      health: 0,\r\n      position: 0\r\n    },\r\n    Friendly3: {\r\n      attack: 0,\r\n      health: 0,\r\n      position: 0\r\n    },\r\n    Friendly4: {\r\n      attack: 0,\r\n      health: 0,\r\n      position: 0\r\n    },\r\n    Friendly5: {\r\n      attack: 0,\r\n      health: 0,\r\n      position: 0\r\n    },\r\n    Friendly6: {\r\n      attack: 0,\r\n      health: 0,\r\n      position: 0\r\n    },\r\n    Friendly7: {\r\n      attack: 0,\r\n      health: 0,\r\n      position: 0\r\n    },\r\n    Enemy1: {\r\n      attack: 0,\r\n      health: 0,\r\n      position: 1\r\n    },\r\n    Enemy2: {\r\n      attack: 0,\r\n      health: 0,\r\n      position: 1\r\n    },\r\n    Enemy3: {\r\n      attack: 0,\r\n      health: 0,\r\n      position: 1\r\n    },\r\n    Enemy4: {\r\n      attack: 0,\r\n      health: 0,\r\n      position: 1\r\n    },\r\n    Enemy5: {\r\n      attack: 0,\r\n      health: 0,\r\n      position: 1\r\n    },\r\n    Enemy6: {\r\n      attack: 0,\r\n      health: 0,\r\n      position: 1\r\n    },\r\n    Enemy7: {\r\n      attack: 0,\r\n      health: 0,\r\n      position: 1\r\n    },\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    this.props.handleSubmit(this.state)\r\n  }\r\n\r\n  handleChange = (event, field, id) => {\r\n    event.preventDefault();\r\n    let value = parseInt(event.target.value);\r\n    if (isNaN(value)) {\r\n      value = 0;\r\n    }\r\n    this.setState({[id]: {\r\n      ...this.state[id],\r\n      [field]: value\r\n    }})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"container\" onSubmit={this.handleSubmit}>\r\n        <div className=\"form-group row entry formy\">\r\n         { \r\n            (Array.from(Array(this.props.friendlyMinions).keys())).map( i => {\r\n              return (\r\n                <Minion\r\n                  name={`Friendly ${i+1}`}\r\n                  key={`Friendly${i+1}`}\r\n                  attack={this.state[`Friendly${i+1}`][0]}\r\n                  health={this.state[`Friendly${i+1}`][1]}\r\n                  handleChange={(e, field) => this.handleChange(e, field, `Friendly${i+1}`)}\r\n                />\r\n              )\r\n            })\r\n          }\r\n        </div>\r\n        <div className=\"form-group row entry formy\">\r\n          { \r\n            (Array.from(Array(this.props.enemyMinions).keys())).map( i => {\r\n              return (\r\n                <Minion\r\n                  name={`Enemy ${i+1}`}\r\n                  key={`Enemy${i+1}`}\r\n                  attack={this.state[`Enemy${i+1}`][0]}\r\n                  health={this.state[`Enemy${i+1}`][1]}\r\n                  handleChange={(e, field) => this.handleChange(e, field, `Enemy${i+1}`)}\r\n                />\r\n              )\r\n            })\r\n          }\r\n        </div>\r\n        { !!(this.props.enemyMinions + this.props.friendlyMinions) &&\r\n          <input type=\"submit\" value=\"Submit\" />\r\n        }\r\n        \r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MinionEntryForm;\r\n","import React from 'react';\r\n\r\nclass Results extends React.Component {\r\n\r\n  render() {\r\n    const {attack, healthBefore, healthAfter, survival, clearChance, remainingDamage} = this.props.stats;\r\n    return (\r\n      <div>\r\n        <table className=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">Minion</th>\r\n              <th scope=\"col\">Attack</th>\r\n              <th scope=\"col\">Health Before</th>\r\n              <th scope=\"col\">Avg. Health After</th>\r\n              <th scope=\"col\">Surival Chance</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {\r\n              this.props.minions.map((m, index) => {\r\n                return (\r\n                  <tr>\r\n                    <td>{m}</td>\r\n                    <td>{attack[index]}</td>\r\n                    <td>{healthBefore[index]}</td>\r\n                    <td>{healthAfter[index].toFixed(2)}</td>\r\n                    <td>{survival[index].toFixed(2)}</td>\r\n                  </tr>\r\n                );\r\n              })\r\n            }\r\n          </tbody>\r\n        </table>\r\n        <div>\r\n          {`Chance to Clear Enemy's Board: ${100*clearChance.toFixed(4)}%`}\r\n        </div>\r\n        <div>\r\n          {`Expected Remaining Enemy Damage: ${remainingDamage.toFixed(2)}`}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Results;\r\n","const shuffle = array => {\r\n  let currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (0 !== currentIndex) {\r\n\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex -= 1;\r\n\r\n    // And swap it with the current element.\r\n    temporaryValue = array[currentIndex];\r\n    array[currentIndex] = array[randomIndex];\r\n    array[randomIndex] = temporaryValue;\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\n// a remake of the sample function that prevents sample(x)=sample(1:x) when length(x)=1\r\nconst mysample = (x) => {\r\n    if (x.length > 1) {\r\n      return shuffle(x);\r\n    } else {\r\n      return x\r\n    }\r\n}\r\n\r\n// Create list from 0 to n-1\r\nconst range = n => {\r\n  return Array.from(Array(n).keys());\r\n}\r\n\r\n// Create a 2D array\r\nconst matrix = (arr, ncol, byrow) => {\r\n  const result = [];\r\n  for (let i=0; i < arr.length/ncol; i++) {\r\n    const row = [];\r\n    for (let j=0; j < ncol; j++) {\r\n      if (byrow) {\r\n        row.push(arr[i*ncol+j])\r\n      } else {\r\n        row.push(arr[i+ncol*j])\r\n      }\r\n    }\r\n    result.push(row);\r\n  }\r\n  return result;\r\n}\r\n\r\n// Create a filled 3D array\r\nconst arr3D = (fillVal, dim1, dim2, dim3) => {\r\n  let result = [];\r\n  for (let i=0; i < dim1; i++) {\r\n    const row = [];\r\n    for (let j=0; j < dim2; j++) {\r\n      row.push(new Array(dim3).fill(fillVal))\r\n    }\r\n    result.push(row);\r\n  }\r\n  return result;\r\n}\r\n\r\n// Mass hysteria simulation function:\r\n// Input: vector of initial stats of minions and which side of the board they are on: \r\n// 0 = your side, 1 = opponent's side\r\n// i.e. (attack1, health1, side1, attack2, health2, side 2,...)\r\n// Output: matrix of stats of minions after mass hysteria has been cast\r\nconst massHysteria = boardStats => {\r\n  const n = boardStats.length/3;\r\n  let stats = matrix(boardStats, 3, true);\r\n  const order = mysample(range(n));\r\n  // for each minion\r\n  for (let i = 0; i < n; i++) {\r\n    // Choose attacker\r\n    const attacker = order[i];\r\n    // Check if attacker is alive    \r\n    if (stats[attacker][1] > 0) {\r\n      // Create a list of possible attackees\r\n      // They can't be the attacker\r\n      let attackee = mysample(range(n).filter(v => v !== attacker));\r\n      // They must be alive\r\n      attackee = attackee.filter(p => {\r\n        return stats[p][1] > 0\r\n      });\r\n      if (attackee.length > 0) {\r\n        // choose one\r\n        attackee = attackee[0];\r\n        // and then attack it\r\n        stats[attacker][1] = stats[attacker][1] - stats[attackee][0];\r\n        stats[attackee][1] = stats[attackee][1] - stats[attacker][0];\r\n      }\r\n    }\r\n  }\r\n  return stats;\r\n}\r\n\r\n// Multiple trials of mass hysteria\r\n// Input: minions' initial stats & posistion and number of trials\r\n// Output: mean stats left on board and proportion of trials in which every \r\n// minion dies (a full board clear)\r\nconst testMassHysteria = (stats, trials) => {\r\n  const n = stats.length/3;\r\n  if (n % 1 !== 0){\r\n    return \"Invalid Minion Stats.\";\r\n  } else {\r\n    const statsMat = matrix(stats, 3, true);\r\n    // Values for Chart at end\r\n    const attack = [];\r\n    const healthBefore = [];\r\n    const isEnemy = [];\r\n    for (let i = 0; i < statsMat.length; i++) {\r\n      attack.push(statsMat[i][0]);\r\n      healthBefore.push(statsMat[i][1]);\r\n      isEnemy.push(statsMat[i][2]);\r\n    }\r\n  \r\n    const survival = new Array(n).fill(0);\r\n    // Create 3D array to house the trials\r\n    let simStats = arr3D(0, n, 3, trials);\r\n    let cleared = new Array(trials).fill(0);\r\n    // for each trial\r\n    for (let trial =0; trial < trials; trial++) {\r\n      // do the trial and put it in the array\r\n      for (let i = 0; i < simStats.length; i++) {\r\n        simStats[i][2][trial] = statsMat[i][2];\r\n      }\r\n      const trialResult = massHysteria(stats);\r\n      for (let i = 0; i < simStats.length; i++) {\r\n        for (let j = 0; j < simStats[0].length; j++) {\r\n          simStats[i][j][trial] = trialResult[i][j];\r\n        }\r\n      }\r\n\r\n      // Get each minion's chance of survival and the chance of clearing the enemy's board\r\n      for (let i = 0; i < simStats.length; i++) {\r\n        survival[i] = survival[i] + (simStats[i][1][trial] > 0 ? 1/trials : 0);\r\n        // see whether or not the trial resulted in a full clear of enemy board\r\n        if (simStats[i][1][trial] * simStats[i][2][trial] > 0) {\r\n          cleared[trial] = 1;\r\n        }\r\n      } \r\n    }\r\n    const healthAfter = [];\r\n    // const chanceOfSurvival = [];\r\n    for (let i = 0; i < simStats.length; i++) {\r\n      let healthSum = 0;\r\n      for (let j = 0; j < trials; j++) {\r\n        healthSum += simStats[i][1][j];\r\n      }\r\n      healthAfter.push(healthSum/trials);\r\n    }\r\n    const clearChance = cleared.reduce((curr, next) => curr+next)/cleared.length;\r\n\r\n    let remainingDamage = 0;\r\n    for (let i = 0; i < attack.length; i++) {\r\n      remainingDamage += attack[i]*survival[i]*isEnemy[i];  \r\n    }\r\n\r\n    // Printing it out and formatting numbers.\r\n    // Remove the formatting if you want to do calculations on these\r\n    // console.log(\"attack: \", attack);\r\n    // console.log(\"healthBefore: \", healthBefore);\r\n    // console.log(\"healthAfter: \", healthAfter.map(x => Number(x.toFixed(2))));\r\n    // console.log(\"survival: \", survival.map(x => Number(x.toFixed(2))));\r\n    // console.log(\"isEnemy: \", isEnemy);\r\n    // console.log(\"clearChance: \", 100*clearChance.toFixed(4));\r\n    // console.log(\"remainingDamage: \", remainingDamage.toFixed(2));\r\n    return {\r\n      attack,\r\n      healthBefore,\r\n      healthAfter,\r\n      survival,\r\n      isEnemy,\r\n      clearChance,\r\n      remainingDamage\r\n    }\r\n  }\r\n}\r\n\r\nexport default testMassHysteria;\r\n","import React from 'react';\nimport MinionCountForm from './MinionCountForm';\nimport MinionEntryForm from './MinionEntryForm';\nimport Results from './Results';\nimport massHysteria from \"./massHysteria\";\n\n\nclass App extends React.Component {\n  state = {\n    allyCount: 0,\n    enemyCount: 0,\n    boardMinions: [],\n    results: {\n      attack: [],\n      healthBefore: [],\n      healthAfter: [],\n      survival: 0,\n      isEnemy: 0,\n      clearChance: 0,\n      remainingDamage: 0\n    },\n    trials: 100\n  }\n\n  handleCountSubmit = (allies, enemies) => {\n    let allyCount = parseInt(allies, 10);\n    let enemyCount = parseInt(enemies, 10);\n    let trials = this.state.trials;\n    let trialCount = trials;\n    if (trials > 1000000) {\n      trialCount = 1000000;\n    }\n    if (isNaN(allyCount)) {\n      allyCount = 0;\n    }\n    if (allyCount > 7) {\n      allyCount = 7;\n    }\n    if (isNaN(enemyCount)) {\n      enemyCount = 0;\n    }\n    if (enemyCount > 7) {\n      enemyCount = 7;\n    }\n    this.setState({\n      allyCount,\n      enemyCount,\n      trials: trialCount\n    });\n  }\n\n  handleEntrySubmit = (minions) => {\n    const result = [];\n    const boardMinions = [];\n    for (let key in minions) {\n      const minion = minions[key];\n      console.log(minion);\n      if (minion.health > 0) {\n        for (let stat of Object.values(minion)) {\n          result.push(stat);\n        }\n        boardMinions.push(key);\n      }\n    }\n    const finalResult = massHysteria(result, this.state.trials);\n    console.log(finalResult);\n    this.setState({results: finalResult, boardMinions})\n  }\n\n  handleTrialChange = event => {\n    event.preventDefault();\n    let value = parseInt(event.target.value);\n    if (!isNaN(value)) {\n      this.setState({trials: value});\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <MinionCountForm\n          handleSubmit={this.handleCountSubmit}\n          trials={this.state.trials}\n          handleTrialChange={this.handleTrialChange}\n        />\n        <MinionEntryForm\n          friendlyMinions={this.state.allyCount}\n          enemyMinions={this.state.enemyCount}\n          handleSubmit={this.handleEntrySubmit}\n        />\n        {\n          this.state.boardMinions.length > 0 &&\n          <Results\n            stats={this.state.results}\n            trials={this.state.trials}\n            minions={this.state.boardMinions}\n          />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}